@page "/studySpotYelp/{studySpot_id}"
@rendermode InteractiveServer
@using Sy = StudySpotYelpNameSpace
@using BuStudentAssistant.Data
@using BuStudentAssistant.Models
@using MongoDB.Driver
@inject IConfiguration Configuration
@inject IHttpClientFactory ClientFactory
@inject HttpClient Http
@inject IJSRuntime JS
@inject IMongoDbContext dbContext


@if( post_first_render ){
    <PageTitle>@spot.Name</PageTitle>

    
    <img id = "banner" src = "https://www.bu.edu/files/2018/12/educational-resource-center-StudySpots-6.jpg">
    <div id = "banner_text">
        <a href = "studySpotYelp"><i class="fa fa-arrow-left" aria-hidden="true"></i></a>
        <div>
            <h1 class = "title">
            @spot.Name (@spot.Id)
            </h1>
            <div>&#127775;: @spot.Score/5.0</div>
            <div>Address: @spot.Address</div>
        </div>
    </div>
    
    <div id = "information">
        
        <p>@spot.Description</p>
        <hr>
        <h3>Comments:</h3>
        @if (@spot.Comments == null){
            <div>loading comments...</div>
        }else{
            
            <ul id = "comment_box">
                <form method="post" @onsubmit="post_comment" @formname="comment-form">
                    <input id = "comment_input_text" type="text" @bind-value="input_text">
                    @* <button class="btn btn-primary" @onclick="post_comment">Comment</button> *@

                    <input type="submit" value="Comment">

                    @* <label for="vol">Volume (between 0 and 50):</label>
                    <input type="range" id="vol" name="vol" min="0" max="5"> *@

                    <div class="stars">
                        <input type="radio" name="rating4" value="1" @onchange="@(() => updateInputStars(1))"/>
                        <input type="radio" name="rating4" value="2" @onchange="@(() => updateInputStars(2))"/>
                        <input type="radio" name="rating4" value="3" @onchange="@(() => updateInputStars(3))" checked="checked"/>
                        <input type="radio" name="rating4" value="4" @onchange="@(() => updateInputStars(4))"/>
                        <input type="radio" name="rating4" value="5" @onchange="@(() => updateInputStars(5))"/>
                        <i></i>
                    </div>
                </form>
                
                
                @foreach (var comment in @spot.Comments){
                    <li>
                        <div>
                            <b>@comment.User_Name</b> 
                            @for (int i = 0; i < @comment.Stars; i++) {
                                <span class="fa fa-star checked" ></span>
                            }
                            @for (int i = @comment.Stars; i < 5; i++) {
                                <span class="fa fa-star"></span>
                            }
                            @* (@comment.Stars )  *@
                            @comment.Date
                        </div>
                        @comment.Text
                    </li>
                }
            </ul>
        }
        
        
    </div>
    <div id = "map_box">
        <a href = "https://www.google.com/maps/place/@spot.Address"><img id = "map"></a>
    </div>
    
    
    
    
}else{
    <div>loading...</div>
}

<script> //Script that updates an image 
window.setImage = async (imageElementId, imageStream) => {
    const arrayBuffer = await imageStream.arrayBuffer();
    const blob = new Blob([arrayBuffer]);
    const url = URL.createObjectURL(blob);
    const image = document.getElementById(imageElementId);
    image.onload = () => {
    URL.revokeObjectURL(url);
    }
    image.src = url;
}
</script>

@code {
    [Parameter]
    public string? studySpot_id { get; set; }
    
    Sy.StudySpot spot;
    Sy.GoogleMaps gmaps;
    bool post_first_render = false;

    public string? input_text;
    public int input_stars;

    private async void update_comments(){
        spot.Comments = await dbContext.Comments.Find(c => c.Spot_id == spot.Id).SortByDescending(c => c.Date).ToListAsync();
        StateHasChanged();
    }

    public void updateInputStars(int star)
    {
        input_stars = star;
    }

    private async void post_comment(){
        Console.WriteLine("BUTTON PRESSED");
        var newComment = new Comment { 
            Date = DateTime.Now,
            Text = input_text,
            User_id = -99,
            Spot_id = spot.Id,
            User_Name = "Current User",
            Stars = input_stars
            };
        await dbContext.Comments.InsertOneAsync(newComment);
        update_comments();
        Console.WriteLine("Inserted Data successfully");

    }
    protected override async Task OnInitializedAsync() // Runs when the page loads
    {

        gmaps = new Sy.GoogleMaps(Configuration, JS, Http, ClientFactory);

        @* ----------- THIS IS FOR TESTING ----------- *@
        string n = "Mugar Memorial Library";
        string a = "771 Commonwealth Ave";
        string d = "Mugar is a second home for many BU students during finals. It will stay open 24 hours from Wednesday, December 13, through Friday, December 22, at 11 pm. The library has seven floors and the largest computer lounge on campus—and the floors get quieter the higher you go. The ground floor makes for an ideal group study environment.";
        string[] c = {"This is my favorite study spot ever!", "I really don't like the way it smells", "AVOID AT ALL COSTS"};
        string[] c_n = {"Bob", "Sue", "Jane"};
        var startDate = DateOnly.FromDateTime(DateTime.Now);
        @* -------------- END OF TESTING -------------- *@

        spot = new Sy.StudySpot{
            Id = int.Parse(studySpot_id),
            Name = n,
            Address = a,
            Map_Marker = 0,
            Description = d,
        };

        update_comments();


        @* spot.Comments = c.Select((comment,index) => new Models.Comment
        {
            Date = startDate.AddDays(index),
            Text = comment,
            User_id = index,
            User_Name = c_n[index],
            Stars = 3
            
        }).ToList(); *@

    }
    protected override async Task OnAfterRenderAsync(bool firstRender) // Runs after the first time the page loads
    {
        if (firstRender)
        {
            gmaps.Maps_Photo_Marker(spot.Address,"map");
            post_first_render = true;
            StateHasChanged();
        }
    }
}
