@page "/studySpotYelp/{studySpot_id}"
@rendermode InteractiveServer
@using Sy = StudySpotYelpNameSpace
@inject IConfiguration Configuration
@inject IHttpClientFactory ClientFactory
@inject HttpClient Http
@inject IJSRuntime JS

@if( post_first_render ){
    <PageTitle>@spot.Name</PageTitle>

    
    <img id = "banner" src = "https://www.bu.edu/files/2018/12/educational-resource-center-StudySpots-6.jpg">
    <div id = "banner_text">
        <a href = "studySpotYelp"><i class="fa fa-arrow-left" aria-hidden="true"></i></a>
        <div>
            <h1 class = "title">
            @spot.Name (@spot.Id)
            </h1>
            <div>Stars: @spot.Score/5.0</div>
            <div>Address: @spot.Address</div>
        </div>
    </div>

    <div id = "information">
        <p>@spot.Description</p>
        <hr>
        <h3>Comments:</h3>
        @if (@spot.Comments == null){
            <div>loading comments...</div>
        }else{
            <ul id = "comment_box">
                @foreach (var comment in @spot.Comments){
                    <li>
                        <div><b>@comment.User_Name</b> @comment.Date</div>
                        @comment.Text
                    </li>
                }
            </ul>
        }
        
        
    </div>
    <div id = "map_box">
        <a href = "https://www.google.com/maps/place/@spot.Address"><img id = "map"></a>
    </div>
    
    
    
    
}else{
    <div>loading...</div>
}

<script> //Script that updates an image 
window.setImage = async (imageElementId, imageStream) => {
    const arrayBuffer = await imageStream.arrayBuffer();
    const blob = new Blob([arrayBuffer]);
    const url = URL.createObjectURL(blob);
    const image = document.getElementById(imageElementId);
    image.onload = () => {
    URL.revokeObjectURL(url);
    }
    image.src = url;
}
</script>

@code {
    [Parameter]
    public string? studySpot_id { get; set; }
    Sy.StudySpot spot;
    Sy.GoogleMaps gmaps;
    bool post_first_render = false;

    protected override async Task OnInitializedAsync() // Runs when the page loads
    {

        gmaps = new Sy.GoogleMaps(Configuration, JS, Http, ClientFactory);

        @* ----------- THIS IS FOR TESTING ----------- *@
        string n = "Mugar Memorial Library";
        string a = "771 Commonwealth Ave";
        string d = "Mugar is a second home for many BU students during finals. It will stay open 24 hours from Wednesday, December 13, through Friday, December 22, at 11 pm. The library has seven floors and the largest computer lounge on campus—and the floors get quieter the higher you go. The ground floor makes for an ideal group study environment.";
        string[] c = {"This is my favorite study spot ever!", "I really don't like the way it smells", "AVOID AT ALL COSTS"};
        string[] c_n = {"Bob", "Sue", "Jane"};
        var startDate = DateOnly.FromDateTime(DateTime.Now);
        @* -------------- END OF TESTING -------------- *@

        spot = new Sy.StudySpot{
            Id = int.Parse(studySpot_id),
            Name = n,
            Address = a,
            Map_Marker = 0,
            Description = d,
        };


        spot.Comments = c.Select((comment,index) => new Sy.Comment
        {
            Id = index,
            Date = startDate.AddDays(index),
            Text = comment,
            User_Id = index,
            User_Name = c_n[index]
            
        }).ToList();

    }
    protected override async Task OnAfterRenderAsync(bool firstRender) // Runs after the first time the page loads
    {
        if (firstRender)
        {
            gmaps.Maps_Photo_Marker(spot.Address,"map");
            post_first_render = true;
            StateHasChanged();
        }
    }
}
