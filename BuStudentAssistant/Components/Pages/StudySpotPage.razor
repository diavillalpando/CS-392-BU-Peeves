@page "/studySpotYelp/{studySpot_id}"
@rendermode InteractiveServer
@using Microsoft.EntityFrameworkCore
@using Radzen
@using Sy = StudySpotYelpNameSpace
@using BuStudentAssistant.Data
@using BuStudentAssistant.Models
@using MongoDB.Driver
@using Google.Apis.Gmail.v1
@using Google.Apis.Gmail.v1.Data
@using Google.Apis.Services
@using Google.Apis.Util.Store
@using Google.Apis.Auth.OAuth2
@inject IConfiguration Configuration
@inject IHttpClientFactory ClientFactory
@inject HttpClient Http
@inject IJSRuntime JS
@inject IMongoDbContext dbContext
@inject NavigationManager NavigationManager


@if( post_first_render ){
    @if (spot != null){
        <PageTitle>@spot.Name</PageTitle>

        <img id = "banner" src = "@spot.Image">
        <div id = "banner_text">
            <a href = "studySpotYelp"><i class="fa fa-arrow-left" aria-hidden="true"></i></a>
            <div>
                <h1 class = "title">
                @spot.Name 
                </h1>
                <div>&#127775;: @getStarScore()/5.0</div>
                <div>Busy: <i class="@getBusyScoreIcon()"></i></div>
                <div>Address: @spot.Address</div>
            </div>
        </div>
        
        <div id = "information">
            <div>
                @if(user_profile != null){
                    <div class="user_info">
                        <p>logged in as: @user_profile.EmailAddress</p>
                        <RadzenButton Shade="Shade.Lighter" Click=@(args => LogOut()) Size="ButtonSize.ExtraSmall" Text="Switch Account" ButtonStyle="ButtonStyle.Danger" />
                    </div>
                }else{
                    <RadzenButton Shade="Shade.Lighter" Click=@(args => LogIn()) Text="Log-in" ButtonStyle="ButtonStyle.Danger" />
                }
            </div>
            <div id = "busyScore_input_box">
                @if(!busyScore_submitted){
                    <h5>How busy is it at @spot.Name?</h5>
                    <form method = "post" @onsubmit="post_busyScore" @formname="busyScore-form">
                        <button type="submit" @onclick="() => input_busyScore = 1"> <i class="fas fa-user"></i></button>
                        <button type="submit" @onclick="() => input_busyScore = 2"> <i class="fas fa-user-friends"></i></button>
                        <button type="submit" @onclick="() => input_busyScore = 3"> <i class="fas fa-users"></i></button>
                    </form>
                }else{
                    <div>Thank you for your feedback! :)</div>
                }
            </div>
            
            
            <p>@spot.Description</p>
            <hr>
            <h3>Comments: </h3>
            @if (spot_comments == null){
                <div>loading comments...</div>
            }else{
                <ul id = "comment_box">
                    @if(user_profile !=null){
                        <form method="post" @onsubmit="post_comment" @formname="comment-form">
                            <input id = "comment_input_text" type="text" @bind-value="input_text">
                            <input type="submit" value="Comment">
                            <div class="stars">
                                <input type="radio" name="rating4" value="1" @onchange="@(() => updateInputStars(1))"/>
                                <input type="radio" name="rating4" value="2" @onchange="@(() => updateInputStars(2))"/>
                                <input type="radio" name="rating4" value="3" @onchange="@(() => updateInputStars(3))" checked="checked"/>
                                <input type="radio" name="rating4" value="4" @onchange="@(() => updateInputStars(4))"/>
                                <input type="radio" name="rating4" value="5" @onchange="@(() => updateInputStars(5))"/>
                                <i></i>
                            </div>
                        </form>
                    }else{
                        <p>Please Log in to leave a comment</p><button  @onclick="LogIn">Log In</button>
                    }
                    
                    
                    
                    @foreach (var comment in spot_comments){
                        <li>
                            <div>
                                <b>@comment.User_Name</b> 
                                @for (int i = 0; i < @comment.Stars; i++) {
                                    <span class="fa fa-star checked" ></span>
                                }
                                @for (int i = @comment.Stars; i < 5; i++) {
                                    <span class="fa fa-star"></span>
                                }
                                @* (@comment.Stars )  *@
                                @comment.Date.ToLocalTime()
                            </div>
                            @comment.Text
                        </li>
                    }
                </ul>
            }
        </div>
    }
    <div id = "map_box">
        <a href = "https://www.google.com/maps/dir//@spot.Lat,@spot.Lng"><img id = "map"></a>
    </div>
    
    
    
    
}else{
    <div>loading...</div>
}

<script> //Script that updates an image 
window.setImage = async (imageElementId, imageStream) => {
    const arrayBuffer = await imageStream.arrayBuffer();
    const blob = new Blob([arrayBuffer]);
    const url = URL.createObjectURL(blob);
    const image = document.getElementById(imageElementId);
    image.onload = () => {
    URL.revokeObjectURL(url);
    }
    image.src = url;
}
</script>

@code {
    [Parameter]
    public string? studySpot_id { get; set; }
    
    StudySpot spot;
    Profile user_profile;
    UserCredential? credential;
    List<Comment> spot_comments;
    List<BusyScore> spot_busyScores;
    Sy.GoogleMaps gmaps;
    bool post_first_render = false;
    bool busyScore_submitted = false;
    public string? input_text;
    public int input_stars;
    public int input_busyScore;
    string[] scopes = new[] 
    {
        GmailService.ScopeConstants.GmailReadonly,
        GmailService.ScopeConstants.GmailCompose,
        GmailService.ScopeConstants.GmailSend
    };

    public static UserCredential Authorize(string clientId, string clientSecret, string[] scopes)
    {
        // Initiate authorization flow
        return GoogleWebAuthorizationBroker.AuthorizeAsync(
            new ClientSecrets { ClientId = clientId, ClientSecret = clientSecret },
            scopes.Append("profile").ToArray(),
            "user",
            CancellationToken.None,
            new FileDataStore("Gmail.API.Auth.Store") // saves login ifo so future authentication is not required
            ).Result;
    }
    private void LogOut()
    {
        credential.RevokeTokenAsync(CancellationToken.None).Wait(); // remove the credential
        LogIn();
        StateHasChanged();

    }
    private void LogIn(){
        credential = Authorize(Configuration["GmailgoogleClientId"], Configuration["GmailgoogleClientSecret"], scopes);
        var gmailService = new GmailService(new BaseClientService.Initializer
                {
                    HttpClientInitializer = credential
                });
        user_profile = gmailService.Users.GetProfile("me").Execute();
    }
    private double minutesElapsedSince(DateTime d){
        return DateTime.Now.ToUniversalTime().Subtract(d).TotalMinutes;
    }
    private async void update_comments(){
        spot_comments = await dbContext.Comments.Find(c => c.Spot_id == spot._id).SortByDescending(c => c.Date).ToListAsync();
        StateHasChanged();
    }
    private double getBusyScore(){
        try{
            var result = dbContext.BusyScores.Aggregate()
                .Match(b => b.Spot_id == spot._id)
                .ToList();
            if (result == null || result.Count == 0){
                return 0.0;
            }
            var filteredResults = from b in result
                            where DateTime.Now.ToUniversalTime().Subtract(b.Date).TotalMinutes < 60 // <- Need to fix this
                            select b;
            return filteredResults.Average(b => b.Score);
        }catch(Exception ex){
            Console.WriteLine($"Error while retrieving busy score for {spot._id}: {ex.Message}");
            return 0.0;
        }
    }

    private string getBusyScoreIcon(){
        double score = getBusyScore();
        if (score < 1.666){
            return "fas fa-user";
        }else if (score < 2.333){
            return "fas fa-user-friends";
        }else{
            return "fas fa-users";
        }

    }
    private double getStarScore(){
        try{
            var result = dbContext.Comments.Aggregate()
                .Match(c => c.Spot_id == spot._id)
                .Group(c => c.Spot_id, g => 
                    new {
                        Spot_id = g.Key,
                        AverageStar = g.Average(p => p.Stars)
                    })
                .ToList();
            return Math.Round(result.Select(_ => _.AverageStar).FirstOrDefault(), 1);
        }catch(Exception ex){
            Console.WriteLine($"Error while retrieving star score for {spot._id}: {ex.Message}");
            return 0;
        }
    }

    public void updateInputStars(int star)
    {
        input_stars = star;
    }

    private async void post_comment(){
        var newComment = new Comment {  
            Date = DateTime.Now, // MongoDB stores by default in UTC
            Text = input_text,
            User_id = -99,
            Spot_id = spot._id,
            User_Name = user_profile.EmailAddress,
            Stars = input_stars
            };
        await dbContext.Comments.InsertOneAsync(newComment);
        update_comments();
        Console.WriteLine($"Uploaded comment '{newComment._id}' to '{spot._id}'");

    }
    private async void post_busyScore(){
        busyScore_submitted = true;
        var newBusyScore = new BusyScore{
            Date = DateTime.Now, // MongoDB stores by default in UTC
            Score = input_busyScore,
            Spot_id = spot._id,
            User_id = 0,
        };
        await dbContext.BusyScores.InsertOneAsync(newBusyScore);
        Console.WriteLine($"Uploaded busyScore '{newBusyScore._id}' to '{spot._id}'");
        
    }
    protected override async Task OnInitializedAsync() // Runs when the page loads
    {
        input_stars = 3;
        gmaps = new Sy.GoogleMaps(Configuration, JS, Http, ClientFactory);
        spot = await dbContext.StudySpots.Find(s => s._id.ToString() == studySpot_id).FirstAsync();
        update_comments();
        LogIn();

    }
    protected override async Task OnAfterRenderAsync(bool firstRender) // Runs after the first time the page loads
    {
        if (firstRender)
        {
            try{
                gmaps.Maps_Photo_Marker(spot.Address,"map");
                post_first_render = true;
                StateHasChanged();
            }catch (Exception ex){
                Console.WriteLine($"Error occurred: '{ex.Message}' going to reload and try again");
                NavigationManager.NavigateTo($"/studySpotYelp/{studySpot_id}",forceLoad: true);
            }
            
        }
    }
}
