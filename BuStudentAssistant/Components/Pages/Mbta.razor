@page "/Mbta"
@rendermode InteractiveServer
@using System.Net.Http
@using System.IO
@using System.Runtime.Serialization.Json
@using System.Text.Json.Serialization
@using System.Text.Json
@using System;
@using System.Collections.Generic;
@using System.Runtime.Serialization;
@using System.Linq;

<style>
    .container {
        display: flex;
        justify-content: center;
        align-items: flex-start;
        height: 100vh;
        padding-top: calc(100vh / 3); /* Set the padding top to 1/3 of the viewport height */
    }

    .form-container {
        text-align: center;
        margin-top: 20px; /* Add margin to the top of the form container */
    }

    .description {
        display: none;
        padding: 20px;
        border: 1px solid #ccc;
        background-color: #f9f9f9;
        margin-top: 20px;
    }

    .show-description:checked + .description {
        display: block;
    }
</style>

<div class="container">
    <div class="form-container">
        <h3>MBTA Vehicle Info</h3>
        <p>This page allows you to get information about MBTA vehicles.</p>
        <p>Simply choose a direction and a stop from the dropdown menus, then click 'Get Vehicle Details' to retrieve vehicle information.</p>


        <!-- Add the description section -->
        <div class="description">
            <p>This page allows you to get information about MBTA vehicles.</p>
            <p>Simply choose a direction and a stop from the dropdown menus, then click 'Get Vehicle Details' to retrieve vehicle information.</p>
        </div>

        <form @onsubmit="GetVehicleInfo">
            <label for="Direction">Choose a Direction:</label>
            <select name="Direction" id="Direction" @bind="SelectedDirection">
                <option value="Inbound">Inbound</option>
                <option value="Outbound">Outbound</option>
            </select>
            <br />

            <label for="Stops">Choose a stop:</label>
            <select name="Stops" id="Stops" @bind="SelectedStop">
                @foreach (var stop in FilteredStops)
                {
                    <option value="@stop">@stop</option>
                }
            </select>

            <br />
            <button type="submit">Get Vehicle Details</button>
        </form>

        <input type="checkbox" @bind="HideNonBUStops" /> Hide Off-Campus Stops

        @if (VehicleInfo != null)
        {
            <div style="margin-top: 20px;">
                <h4>Arrival Time: @VehicleInfo.ArrivalTime</h4>
                <h4>Status: @VehicleInfo.Status</h4>
            </div>
        }
    </div>
</div>

@code {
    private string SelectedDirection { get; set; } = "0";
    private string SelectedStop { get; set; } = "0";
    private VehicleInfoResponse VehicleInfo { get; set; }
    private bool HideNonBUStops { get; set; }

    private async Task GetVehicleInfo()
    {
        using (HttpClient client = new HttpClient())
        {
            var apiKey = "5e809ee23cfb47d9ae73f773da5e4d8e";
            var baseUrl = "https://api-v3.mbta.com/predictions";
            var direction = SelectedDirection == "Inbound" ? "0" : "1";
            var stop = SelectedStop;
            var get_url = $"{baseUrl}?filter[route]=Green-B&filter[direction_id]={direction}&filter[stop]={stop}&sort=departure_time&api_key={apiKey}";
            HttpResponseMessage response = await client.GetAsync(get_url);

            if (response.IsSuccessStatusCode)
            {
                using (Stream responseStream = await response.Content.ReadAsStreamAsync())
                {
                    var serializer = new DataContractJsonSerializer(typeof(PredictionResponse));
                    var predictionResponse = (PredictionResponse)serializer.ReadObject(responseStream);
                    var status = predictionResponse?.Data.FirstOrDefault()?.Attributes?.Status ?? "Status not available";
                    var arrivalTime = predictionResponse?.Data.FirstOrDefault()?.Attributes?.ArrivalTime ?? "Arrival time not available";
                    VehicleInfo = new VehicleInfoResponse { Status = status, ArrivalTime = arrivalTime };
                }
            }
            else
            {
                throw new Exception($"Failed to fetch arrival time for {SelectedDirection} train at {SelectedStop}. Status code: {response.StatusCode}");
            }
        }
    }

    [DataContract]
    public class VehicleInfoResponse
    {
        [DataMember(Name = "status")]
        public string Status { get; set; }

        [DataMember(Name = "arrival_time")]
        public string ArrivalTime { get; set; }
    }

    [DataContract]
    public class PredictionResponse
    {
        [DataMember(Name = "data")]
        public List<PredictionData> Data { get; set; }
    }

    [DataContract]
    public class PredictionData
    {
        [DataMember(Name = "attributes")]
        public PredictionAttributes Attributes { get; set; }
    }

    [DataContract]
    public class PredictionAttributes
    {
        [DataMember(Name = "status")]
        public string Status { get; set; }

        [DataMember(Name = "arrival_time")]
        public string ArrivalTime { get; set; }
    }

    private List<string> AllStops = new List<string>
    {
        "Allston Street", "Amory Street", "Arlington", "Babcock Street", "Blandford Street",
        "Boylston", "Boston College", "Boston University Central", "Boston University East",
        "Chestnut Hill Avenue", "Chiswick Road", "Copley", "Government Center", "Griggs Street",
        "Harvard Avenue", "Hynes Convention Center", "Kenmore", "Packard's Corner", "Park Street",
        "South Street", "Sutherland Road", "Warren Street", "Washington Street"
    };

    private IEnumerable<string> FilteredStops =>
        HideNonBUStops ? AllStops.Where(stop => stop.Contains("Boston University") || stop == "Amory Street" || stop == "Babcock Street" || stop == "Kenmore" || stop == "Blandford Street") : AllStops;
}
