@using System;
@using System.Collections.Generic;
@using System.IO;
@using System.Net.Http;
@using System.Runtime.Serialization;
@using System.Runtime.Serialization.Json;
@using System.Text.Json.Serialization;
@using System.Threading.Tasks;
@using System.Linq;

@page "/Mbta2"
@rendermode InteractiveServer

<h3>MBTA Vehicle Info</h3>


<!-- Add the description section -->
<div class="description">
    <p>This page allows you to get information about MBTA vehicles.</p>
    <p>Simply choose a stop from the dropdown menu, then click 'Get Vehicle Details' to retrieve vehicle information.</p>
    <p>A colored vehicle image is shown. This color describes the crowdedness of the vehicle. Green is near empty or no info, yellow is partially filled, red is almost nearly filled.</p>
    <p>Optionally, you can hide off-campus stops by checking the checkbox.</p>
</div>

<form @onsubmit="GetVehicleInfo">
    <label for="Stops">Choose a stop:</label>
    <select name="Stops" id="Stops" @bind="SelectedStop">
        @foreach (var stop in FilteredStops.OrderBy(s => s))
        {
            <option value="@stop">@stop</option>
        }
    </select>

    <button type="submit">Get Vehicle Details</button>
</form>

<label>
    <input type="checkbox" @bind="FilterOffCampusStops" /> Hide Off-campus Stops
</label>

@{
    string imagePath = "";
    if (VehicleInfo != null)
    {
        <h4>Arrival Time: @VehicleInfo.ArrivalTime</h4>
        <h4>Status: @VehicleInfo.Status</h4>
        <h4>Crowdedness: @VehicleInfo.Crowdedness</h4>

        switch (VehicleInfo.Crowdedness)
        {
            case "MANY_SEATS_AVAILABLE":
                imagePath = "yellow.png";
                break;
            case "FEW_SEATS_AVAILABLE":
                imagePath = "red.png";
                break;
            default:
                imagePath = "green.png";
                break;
        }
    }
}

@if (!string.IsNullOrEmpty(imagePath))
{
    <img src="images/@imagePath" alt="Crowdedness Image" />
}

@code {
    private string SelectedStop { get; set; } = "Water St @@ Watertown Yard";
    private VehicleInfoResponse VehicleInfo { get; set; }
    private bool FilterOffCampusStops { get; set; }

    private async Task GetVehicleInfo()
    {
        using (HttpClient client = new HttpClient())
        {
            var apiKey = "5e809ee23cfb47d9ae73f773da5e4d8e";
            var baseUrl = "https://api-v3.mbta.com/predictions";
            var stop = SelectedStop.Replace(" ", "%20"); // Replace spaces with %20
            var get_url = $"{baseUrl}?filter[route]=Green-B&filter[stop]={stop}&sort=departure_time&api_key={apiKey}";
            HttpResponseMessage response = await client.GetAsync(get_url);

            if (response.IsSuccessStatusCode)
            {
                using (Stream responseStream = await response.Content.ReadAsStreamAsync())
                {
                    var serializer = new DataContractJsonSerializer(typeof(PredictionResponse));
                    var predictionResponse = (PredictionResponse)serializer.ReadObject(responseStream);
                    var prediction = predictionResponse?.Data.FirstOrDefault();
                    var status = prediction?.Attributes?.Status ?? "Status not available";
                    var arrivalTime = prediction?.Attributes?.ArrivalTime ?? "Arrival time not available";

                    // Get the vehicle ID
                    var vehicleId = prediction?.Relationships?.Vehicle?.Data?.Id;

                    string crowdedness;
                    // Make another API call to get vehicle crowdedness
                    if (!string.IsNullOrEmpty(vehicleId))
                    {
                        crowdedness = await GetVehicleCrowdedness(vehicleId, apiKey);
                    }
                    else
                    {
                        crowdedness = "Vehicle Occupancy Not Available";
                    }
                    VehicleInfo = new VehicleInfoResponse { Status = status, ArrivalTime = arrivalTime, Crowdedness = crowdedness };
                }
            }
            else
            {
                throw new Exception($"Failed to fetch arrival time for train at {SelectedStop}. Status code: {response.StatusCode}");
            }
        }
    }

    private async Task<string> GetVehicleCrowdedness(string vehicleId, string apiKey)
    {
        using (HttpClient client = new HttpClient())
        {
            var vehicleUrl = $"https://api-v3.mbta.com/vehicles/{vehicleId}?api_key={apiKey}";

            HttpResponseMessage response = await client.GetAsync(vehicleUrl);

            if (response.IsSuccessStatusCode)
            {
                using (Stream responseStream = await response.Content.ReadAsStreamAsync())
                {
                    var serializer = new DataContractJsonSerializer(typeof(VehicleResponse));
                    var vehicleResponse = (VehicleResponse)serializer.ReadObject(responseStream);
                    var crowdedness = vehicleResponse?.Data?.Attributes?.OccupancyStatus ?? "Unknown. Hope it's empty";
                    return crowdedness;
                }
            }
            else
            {
                return "Unknown";
            }
        }
    }

    [DataContract]
    public class VehicleInfoResponse
    {
        [DataMember(Name = "status")]
        public string Status { get; set; }

        [DataMember(Name = "arrival_time")]
        public string ArrivalTime { get; set; }

        public string Crowdedness { get; set; }
    }

    [DataContract]
    public class PredictionResponse
    {
        [DataMember(Name = "data")]
        public List<PredictionData> Data { get; set; }
    }

    [DataContract]
    public class PredictionData
    {
        [DataMember(Name = "attributes")]
        public PredictionAttributes Attributes { get; set; }

        [DataMember(Name = "relationships")]
        public PredictionRelationships Relationships { get; set; }
    }

    [DataContract]
    public class PredictionAttributes
    {
        [DataMember(Name = "status")]
        public string Status { get; set; }

        [DataMember(Name = "arrival_time")]
        public string ArrivalTime { get; set; }
    }

    [DataContract]
    public class PredictionRelationships
    {
        [DataMember(Name = "vehicle")]
        public VehicleData Vehicle { get; set; }
    }

    [DataContract]
    public class VehicleData
    {
        [DataMember(Name = "data")]
        public VehicleDatum Data { get; set; }
        [DataMember(Name = "attributes")]
        public VehicleAttributes Attributes { get; set; } // This should match the structure of your JSON response
    }

    [DataContract]
    public class VehicleDatum
    {
        [DataMember(Name = "id")]
        public string Id { get; set; }
    }

    [DataContract]
    public class VehicleResponse
    {
        [DataMember(Name = "data")]
        public VehicleData Data { get; set; }

        [DataMember(Name = "attributes")]
        public VehicleAttributes Attributes { get; set; }
    }

    [DataContract]
    public class VehicleAttributes
    {
        [DataMember(Name = "occupancy_status")]
        public string OccupancyStatus { get; set; }
    }

    private List<string> AllStops = new List<string>
    {
        "1079 Commonwealth Ave", "400 Centre St - East", "Ave Louis Pasteur @@ Longwood Ave", "Ave Louis Pasteur @@ The Fenway",
        "Beacon St @@ Raleigh St", "Belvidere St @@ Huntington Ave", "Boylston St @@ Clarendon St", "Boylston St @@ Dartmouth St",
        "Boylston St @@ Massachusetts Ave", "Boylston St @@ Prudential Center", "Brighton Ave @@ Allston St", "Brighton Ave @@ Cambridge St",
        "Brighton Ave @@ Commonwealth Ave", "Brighton Ave @@ Harvard Ave", "Brighton Ave @@ Linden St", "Brighton Ave @@ Malvern St",
        "Brighton Ave opp Quint Ave", "Cambridge St @@ Barrows St", "Cambridge St @@ Dustin St", "Cambridge St @@ Elko St",
        "Cambridge St @@ Gordon St", "Cambridge St @@ N Beacon St", "Cambridge St @@ Saunders St", "Cambridge St @@ Sparhawk St",
        "Chauncy St @@ Summer St", "Centre St @@ Jefferson St", "Commonwealth Ave @@ Babcock St", "Commonwealth Ave @@ Blandford St",
        "Commonwealth Ave @@ Buick St", "Commonwealth Ave @@ Carlton St", "Commonwealth Ave @@ Granby St", "Commonwealth Ave @@ Hinsdale St",
        "Commonwealth Ave @@ Kenmore St", "Commonwealth Ave @@ Pleasant St", "Commonwealth Ave @@ Silber Way", "Commonwealth Ave @@ St Mary's St",
        "Commonwealth Ave @@ University Rd", "Congress St @@ Haymarket Sta", "Congress St @@ North St", "Congress St @@ State St",
        "Dalton St @@ Belvidere St", "Galen St @@ Boyd St", "Galen St @@ Maple St", "Galen St @@ Water St", "Kenmore",
        "Massachusetts Ave @@ Newbury St", "Milk St @@ Devonshire St", "Mountfort St @@ Carlton St", "Park Dr @@ Beacon St",
        "Park Dr @@ Fenway Station", "Park St @@ Elmwood St", "Park St @@ Tremont St", "Pearl St @@ Congress St", "Saint James Ave @@ Arlington St",
        "Saint James Ave @@ Clarendon St", "Saint James Ave @@ Dartmouth St", "Stuart St @@ Charles St S", "Tremont St @@ Beacon St",
        "Tremont St @@ Boylston Station", "Tremont St @@ Cufflin St", "Tremont St @@ Pembroke St", "Tremont St @@ Tremont Pl",
        "Tremont St @@ Waverley Ave", "Tremont St @@ Whittemore Rd", "Tremont St @@ Washington St", "Tremont St opp Cufflin St",
        "Tremont St opp Hibbard Rd", "Tremont St opp Temple Pl", "Tremont St opp Tremont Pl", "Washington St @@ Bacon St", "Washington St @@ Breck Ave",
        "Washington St @@ Brock St", "Washington St @@ Chestnut Hill Ave", "Washington St @@ Foster St", "Washington St @@ Langley Rd",
        "Washington St @@ Market St", "Washington St @@ Oak Square Ave", "Washington St @@ Oak Sq", "Washington St @@ Waldo Terr",
        "Water St @@ Watertown Yard"
    };

    private IEnumerable<string> FilteredStops =>
        FilterOffCampusStops ? AllStops.Where(stop => !stop.Contains("Washington St") && !stop.Contains("Tremont St") && !stop.Contains("Commonwealth Ave")) : AllStops;
}
