@using System;
@using System.Collections.Generic;
@using System.IO;
@using System.Net.Http;
@using System.Runtime.Serialization;
@using System.Runtime.Serialization.Json;
@using System.Text.Json.Serialization;
@using System.Threading.Tasks;
@using System.Linq

@page "/Mbta2"
@rendermode InteractiveServer

<h3>MBTA Vehicle Info</h3>

<form @onsubmit="GetVehicleInfo">
    <label for="Direction">Choose a Direction:</label>
    <select name="Direction" id="Direction" @bind="SelectedDirection">
        <option value="Inbound">Inbound</option>
        <option value="Outbound">Outbound</option>
    </select>
    <br />
    <label for="Stops">Choose a stop:</label>
    <select name="Stops" id="Stops" @bind="SelectedStop">
        <option value="Water St @@ Watertown Yard">Water St @@ Watertown Yard</option>
        <option value="Galen St @@ Boyd St">Galen St @@ Boyd St</option>
        <option value="Centre St @@ Pearl St">Centre St @@ Pearl St</option>
        <option value="Washington St @@ Bacon St">Washington St @@ Bacon St</option>
        <option value="400 Centre St - East">400 Centre St - East</option>
        <option value="Park St @@ Elmwood St">Park St @@ Elmwood St</option>
        <option value="Tremont St opp Hibbard Rd">Tremont St opp Hibbard Rd</option>
        <option value="Tremont St @@ Waverley Ave">Tremont St @@ Waverley Ave</option>
        <option value="Tremont St @@ Pembroke St">Tremont St @@ Pembroke St</option>
        <option value="Tremont St @@ Cufflin St">Tremont St @@ Cufflin St</option>
        <option value="Tremont St @@ Tremont Pl">Tremont St @@ Tremont Pl</option>
        <option value="Tremont St @@ Washington St">Tremont St @@ Washington St</option>
        <option value="Washington St @@ Breck Ave">Washington St @@ Breck Ave</option>
        <option value="Washington St @@ Langley Rd">Washington St @@ Langley Rd</option>
        <option value="Washington St @@ Lake St">Washington St @@ Lake St</option>
        <option value="Washington St @@ Foster St">Washington St @@ Foster St</option>
        <option value="Washington St @@ Chestnut Hill Ave">Washington St @@ Chestnut Hill Ave</option>
        <option value="Washington St opp Waldo Terr">Washington St opp Waldo Terr</option>
        <option value="Cambridge St @@ Washington St">Cambridge St @@ Washington St</option>
        <option value="Cambridge St opp Elko St">Cambridge St opp Elko St</option>
        <option value="Cambridge St opp Dustin St">Cambridge St opp Dustin St</option>
        <option value="Cambridge St @@ Gordon St">Cambridge St @@ Gordon St</option>
        <option value="Cambridge St @@ Barrows St">Cambridge St @@ Barrows St</option>
        <option value="Brighton Ave @@ Cambridge St">Brighton Ave @@ Cambridge St</option>
        <option value="Brighton Ave @@ Allston St">Brighton Ave @@ Allston St</option>
        <option value="Brighton Ave @@ Harvard Ave">Brighton Ave @@ Harvard Ave</option>
        <option value="Brighton Ave @@ Commonwealth Ave">Brighton Ave @@ Commonwealth Ave</option>
        <option value="Commonwealth Ave @@ Babcock St">Commonwealth Ave @@ Babcock St</option>
        <option value="Commonwealth Ave @@ Pleasant St">Commonwealth Ave @@ Pleasant St</option>
        <option value="Commonwealth Ave @@ Carlton St">Commonwealth Ave @@ Carlton St</option>
        <option value="Commonwealth Ave @@ St Mary's St">Commonwealth Ave @@ St Mary's St</option>
        <option value="Commonwealth Ave @@ Hinsdale St">Commonwealth Ave @@ Hinsdale St</option>
        <option value="Commonwealth Ave @@ Blandford St">Commonwealth Ave @@ Blandford St</option>
        <option value="Kenmore">Kenmore</option>
        <option value="Commonwealth Ave @@ Kenmore St">Commonwealth Ave @@ Kenmore St</option>
        <option value="Boylston St @@ Prudential Center">Boylston St @@ Prudential Center</option>
        <option value="Boylston St @@ Dartmouth St">Boylston St @@ Dartmouth St</option>
        <option value="Boylston St @@ Clarendon St">Boylston St @@ Clarendon St</option>
        <option value="Boylston St @@ Berkeley St">Boylston St @@ Berkeley St</option>
        <option value="Chauncy St @@ Summer St">Chauncy St @@ Summer St</option>
        <option value="Milk St @@ Devonshire St">Milk St @@ Devonshire St</option>
        <option value="Pearl St @@ Congress St">Pearl St @@ Congress St</option>
        <option value="Congress St @@ State St">Congress St @@ State St</option>
        <option value="Congress St @@ North St">Congress St @@ North St</option>
        <option value="Congress St @@ Haymarket Sta">Congress St @@ Haymarket Sta</option>
        <option value="State St @@ Washington Mall - State St Sta">State St @@ Washington Mall - State St Sta</option>
        <option value="Tremont St @@ Beacon St">Tremont St @@ Beacon St</option>
        <option value="Tremont St opp Temple Pl">Tremont St opp Temple Pl</option>
        <option value="Tremont St @@ Boylston Station">Tremont St @@ Boylston Station</option>
        <option value="Stuart St @@ Charles St S">Stuart St @@ Charles St S</option>
        <option value="Saint James Ave @@ Arlington St">Saint James Ave @@ Arlington St</option>
        <option value="Saint James Ave @@ Clarendon St">Saint James Ave @@ Clarendon St</option>
        <option value="Saint James Ave @@ Dartmouth St">Saint James Ave @@ Dartmouth St</option>
        <option value="Belvidere St @@ Huntington Ave">Belvidere St @@ Huntington Ave</option>
        <option value="Dalton St @@ Belvidere St">Dalton St @@ Belvidere St</option>
        <option value="Boylston St @@ Massachusetts Ave">Boylston St @@ Massachusetts Ave</option>
        <option value="Massachusetts Ave @@ Newbury St">Massachusetts Ave @@ Newbury St</option>
        <option value="Beacon St @@ Raleigh St">Beacon St @@ Raleigh St</option>
        <option value="Commonwealth Ave @@ Silber Way">Commonwealth Ave @@ Silber Way</option>
        <option value="Commonwealth Ave @@ Granby St">Commonwealth Ave @@ Granby St</option>
        <option value="Commonwealth Ave @@ St Mary's St">Commonwealth Ave @@ St Mary's St</option>
        <option value="Commonwealth Ave @@ University Rd">Commonwealth Ave @@ University Rd</option>
        <option value="Ave Louis Pasteur @@ Longwood Ave">Ave Louis Pasteur @@ Longwood Ave</option>
        <option value="Ave Louis Pasteur @@ The Fenway">Ave Louis Pasteur @@ The Fenway</option>
        <option value="Park Dr @@ Fenway Station">Park Dr @@ Fenway Station</option>
        <option value="Park Dr @@ Beacon St">Park Dr @@ Beacon St</option>
        <option value="Mountfort St @@ Carlton St">Mountfort St @@ Carlton St</option>
        <option value="Commonwealth Ave @@ University Rd">Commonwealth Ave @@ University Rd</option>
        <option value="Commonwealth Ave @@ Buick St">Commonwealth Ave @@ Buick St</option>
        <option value="Commonwealth Ave @@ Babcock St">Commonwealth Ave @@ Babcock St</option>
        <option value="1079 Commonwealth Ave">1079 Commonwealth Ave</option>
        <option value="Brighton Ave @@ Malvern St">Brighton Ave @@ Malvern St</option>
        <option value="Brighton Ave @@ Linden St">Brighton Ave @@ Linden St</option>
        <option value="Brighton Ave opp Quint Ave">Brighton Ave opp Quint Ave</option>
        <option value="Cambridge St @@ N Beacon St">Cambridge St @@ N Beacon St</option>
        <option value="Cambridge St @@ Saunders St">Cambridge St @@ Saunders St</option>
        <option value="Cambridge St @@ Dustin St">Cambridge St @@ Dustin St</option>
        <option value="Cambridge St @@ Sparhawk St">Cambridge St @@ Sparhawk St</option>
        <option value="Cambridge St @@ Elko St">Cambridge St @@ Elko St</option>
        <option value="Washington St @@ Waldo Terr">Washington St @@ Waldo Terr</option>
        <option value="Washington St @@ Market St">Washington St @@ Market St</option>
        <option value="Washington St @@ Foster St">Washington St @@ Foster St</option>
        <option value="Washington St @@ Brock St">Washington St @@ Brock St</option>
        <option value="Washington St @@ Oak Square Ave">Washington St @@ Oak Square Ave</option>
        <option value="Washington St @@ Oak Sq">Washington St @@ Oak Sq</option>
        <option value="Tremont St @@ Washington St">Tremont St @@ Washington St</option>
        <option value="Tremont St opp Tremont Pl">Tremont St opp Tremont Pl</option>
        <option value="Tremont St opp Cufflin St">Tremont St opp Cufflin St</option>
        <option value="Tremont St @@ Whittemore Rd">Tremont St @@ Whittemore Rd</option>
        <option value="Tremont St @@ Waverley Ave">Tremont St @@ Waverley Ave</option>
        <option value="Tremont St @@ Hibbard Rd">Tremont St @@ Hibbard Rd</option>
        <option value="Park St @@ Tremont St">Park St @@ Tremont St</option>
        <option value="Centre St @@ Jefferson St">Centre St @@ Jefferson St</option>
        <option value="Galen St @@ Maple St">Galen St @@ Maple St</option>
        <option value="Galen St @@ Water St">Galen St @@ Water St</option>
    </select>

    <button type="submit">Get Vehicle Details</button>
</form>

@{
    string imagePath = "";
    if (VehicleInfo != null)
    {
        <h4>Arrival Time: @VehicleInfo.ArrivalTime</h4>
        <h4>Status: @VehicleInfo.Status</h4>
        <h4>Crowdedness: @VehicleInfo.Crowdedness</h4>

        switch (VehicleInfo.Crowdedness)
        {
            case "MANY_SEATS_AVAILABLE":
                imagePath = "yellow.png";
                break;
            case "FEW_SEATS_AVAILABLE":
                imagePath = "red.png";
                break;
            default:
                imagePath = "green.png";
                break;
        }
    }
}

@if (!string.IsNullOrEmpty(imagePath))
{
    <img src="images/@imagePath" alt="Crowdedness Image" />
}
@code {
    private string SelectedDirection { get; set; } = "0";
    private string SelectedStop { get; set; } = "0";
    private VehicleInfoResponse VehicleInfo { get; set; }

    private async Task GetVehicleInfo()
    {
        using (HttpClient client = new HttpClient())
        {
            var apiKey = "5e809ee23cfb47d9ae73f773da5e4d8e";
            var baseUrl = "https://api-v3.mbta.com/predictions";
            var direction = SelectedDirection == "Inbound" ? "0" : "1";
            var stop = SelectedStop.Replace(" ", "%20"); // Replace spaces with %20
            var get_url = $"{baseUrl}?filter[route]=Green-B&filter[direction_id]={direction}&filter[stop]={stop}&sort=departure_time&api_key={apiKey}";
            HttpResponseMessage response = await client.GetAsync(get_url);

            if (response.IsSuccessStatusCode)
            {
                using (Stream responseStream = await response.Content.ReadAsStreamAsync())
                {
                    var serializer = new DataContractJsonSerializer(typeof(PredictionResponse));
                    var predictionResponse = (PredictionResponse)serializer.ReadObject(responseStream);
                    var prediction = predictionResponse?.Data.FirstOrDefault();
                    var status = prediction?.Attributes?.Status ?? "Status not available";
                    var arrivalTime = prediction?.Attributes?.ArrivalTime ?? "Arrival time not available";

                    // Get the vehicle ID
                    var vehicleId = prediction?.Relationships?.Vehicle?.Data?.Id;

                    string crowdedness;
                    // Make another API call to get vehicle crowdedness
                    if (!string.IsNullOrEmpty(vehicleId))
                    {
                        crowdedness = await GetVehicleCrowdedness(vehicleId, apiKey);
                    }
                    else
                    {
                        crowdedness = "Vehicle Occupancy Not Available";
                    }
                    VehicleInfo = new VehicleInfoResponse { Status = status, ArrivalTime = arrivalTime, Crowdedness = crowdedness };
                }
            }
            else
            {
                throw new Exception($"Failed to fetch arrival time for {SelectedDirection} train at {SelectedStop}. Status code: {response.StatusCode}");
            }
        }
    }

    private async Task<string> GetVehicleCrowdedness(string vehicleId, string apiKey)
    {
        using (HttpClient client = new HttpClient())
        {
            var vehicleUrl = $"https://api-v3.mbta.com/vehicles/{vehicleId}?api_key={apiKey}";

            HttpResponseMessage response = await client.GetAsync(vehicleUrl);

            if (response.IsSuccessStatusCode)
            {
                using (Stream responseStream = await response.Content.ReadAsStreamAsync())
                {
                    var serializer = new DataContractJsonSerializer(typeof(VehicleResponse));
                    var vehicleResponse = (VehicleResponse)serializer.ReadObject(responseStream);
                    var crowdedness = vehicleResponse?.Data?.Attributes?.OccupancyStatus ?? "Unknown. Hope it's empty";
                    return crowdedness;
                }
            }
            else
            {
                return "Unknown";
            }
        }
    }

    [DataContract]
    public class VehicleInfoResponse
    {
        [DataMember(Name = "status")]
        public string Status { get; set; }

        [DataMember(Name = "arrival_time")]
        public string ArrivalTime { get; set; }

        public string Crowdedness { get; set; }
    }

    [DataContract]
    public class PredictionResponse
    {
        [DataMember(Name = "data")]
        public List<PredictionData> Data { get; set; }
    }

    [DataContract]
    public class PredictionData
    {
        [DataMember(Name = "attributes")]
        public PredictionAttributes Attributes { get; set; }

        [DataMember(Name = "relationships")]
        public PredictionRelationships Relationships { get; set; }
    }

    [DataContract]
    public class PredictionAttributes
    {
        [DataMember(Name = "status")]
        public string Status { get; set; }

        [DataMember(Name = "arrival_time")]
        public string ArrivalTime { get; set; }
    }

    [DataContract]
    public class PredictionRelationships
    {
        [DataMember(Name = "vehicle")]
        public VehicleData Vehicle { get; set; }
    }

    [DataContract]
    public class VehicleData
    {
        [DataMember(Name = "data")]
        public VehicleDatum Data { get; set; }
        [DataMember(Name = "attributes")]
        public VehicleAttributes Attributes { get; set; } // This should match the structure of your JSON response
    }

    [DataContract]
    public class VehicleDatum
    {
        [DataMember(Name = "id")]
        public string Id { get; set; }
    }

    [DataContract]
    public class VehicleResponse
    {
        [DataMember(Name = "data")]
        public VehicleData Data { get; set; }

        [DataMember(Name = "attributes")]
        public VehicleAttributes Attributes { get; set; }
    }

    [DataContract]
    public class VehicleAttributes
    {
        [DataMember(Name = "occupancy_status")]
        public string OccupancyStatus { get; set; }
    }
}
