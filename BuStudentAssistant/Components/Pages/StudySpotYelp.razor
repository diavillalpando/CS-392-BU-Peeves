@page "/studySpotYelp"
@rendermode InteractiveServer
@using System.Text.Json
@using System.Text.Json.Serialization
@using Microsoft.Extensions.Configuration
@using System.Drawing.Imaging
@inject IConfiguration Configuration
@inject IHttpClientFactory ClientFactory
@inject HttpClient Http
@inject IJSRuntime JS

<PageTitle>Study Spot Yelp</PageTitle>

<h1>Study Spot Yelp</h1>
<p>Key: @Configuration["GMapsApiKey"]</p>
<div>@placeDetails</div>

<h3>Manual Image</h3>
<img src = "@manualImage">

<h3>Stream Image</h3>
<p>
    <img id="image" />
</p>
<button @onclick="SetImageAsync">
    Set Image
</button>


<script>
  window.setImage = async (imageElementId, imageStream) => {
    const arrayBuffer = await imageStream.arrayBuffer();
    const blob = new Blob([arrayBuffer]);
    const url = URL.createObjectURL(blob);
    const image = document.getElementById(imageElementId);
    image.onload = () => {
      URL.revokeObjectURL(url);
    }
    image.src = url;
  }
</script>


@code {
    string placeDetails;
    string maps_photo;
    string manualImage;
    bool map_loaded;
    string test = "beep";

    private string my_place_id = "ChIJFzjlY_B544kRyL6j4ABuNCs";


    private async Task<Stream> getUrl(string sURL) // makes a get call from the parameter 'sURL' and returns a Stream object
    {
        var client = ClientFactory.CreateClient();
        
        var request = new HttpRequestMessage(HttpMethod.Get, sURL);
        var response = await client.SendAsync(request);
        
        if (response.IsSuccessStatusCode)
        {
            return await response.Content.ReadAsStreamAsync();
        } 
        throw new HttpRequestException("Response Success Status Code not successful" );
    }

    private string streamToString(Stream stream) // parses a stream into a string
    {
        StreamReader reader = new StreamReader(stream); 

        string sLine = reader.ReadLine();
        string returnStr = "";

        while (sLine != null)
        {
            if (sLine != null)
                returnStr += sLine + "\n";
            sLine = reader.ReadLine();
        }
        return returnStr;
    }


    private string Place_Details(string place_id, string fields = "id,displayName")
    /*
        * place_id - every location in google maps has a place_id associated with it, to find it go to: https://developers.google.com/maps/documentation/javascript/examples/places-placeid-finder
        * fields - the desired fields that are returned (Note: some fields cost money and some don't)
        */
    {
        var api_key = Configuration["GMapsApiKey"];
        try{
            var stream = Task.Run(() => getUrl($"https://places.googleapis.com/v1/places/{place_id}?fields=id,displayName&key={api_key}")).Result; // makes url call
            return streamToString(stream); // converts returned stream into a string and returns it
        }catch(Exception ex){
            return $"Couldn't load place details: {ex.Message}";
        }
        
    }

    private async Task<Stream> GetImageStreamAsync()
    {
        var api_key = Configuration["GMapsApiKey"];
        var center = "Boston University, Boston, ma";
        return Task.Run(() => getUrl($"https://maps.googleapis.com/maps/api/staticmap?key={api_key}&size={500}x{500}&Zoom={20}&center=\"{center}\"")).Result; // makes url call
    }
    
    private async Task<bool> SetImageAsync()
    {
        Console.WriteLine("My debug output.");
        var imageStream = await GetImageStreamAsync();
        var dotnetImageStream = new DotNetStreamReference(imageStream);
        await JS.InvokeVoidAsync("setImage", "image", dotnetImageStream);
        StateHasChanged();
        return true;
    }



    protected override async Task OnInitializedAsync() // Runs when the page loads
    {
        map_loaded = false;
        placeDetails = Place_Details(my_place_id);

        var api_key = Configuration["GMapsApiKey"];
        var center = "Boston University, Boston, ma";
        
        
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            var api_key = Configuration["GMapsApiKey"];
            var center = "Boston University, Boston, ma";

            await SetImageAsync();

            StateHasChanged();
        }
    }



}
