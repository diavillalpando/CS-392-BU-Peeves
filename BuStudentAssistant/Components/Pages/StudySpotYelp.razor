@page "/studySpotYelp"
@rendermode InteractiveServer
@using System.Text.Json
@using System.Text.Json.Serialization
@using Majorsoft.Blazor.Components.Maps
@using Microsoft.Extensions.Configuration
@using System.Drawing.Imaging
@using BuStudentAssistant.Data
@using BuStudentAssistant.Models
@using MongoDB.Driver
@inject IConfiguration Configuration
@inject IHttpClientFactory ClientFactory
@inject HttpClient Http
@inject IJSRuntime JS
@inject IMongoDbContext dbContext
@using Sy = StudySpotYelpNameSpace



<PageTitle>Study Spot Yelp</PageTitle>

@if (study_spots == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <ul id="study_spot_list">
        <h1 class = "title">
            Study Spot Yelp
        </h1>
        
        @foreach (var spot in study_spots)
            {
                <li><a href = "/StudySpotYelp/@spot._id">
                    <img src = "@spot.Image">
                    <div>
                        <div><b>@spot.Name</b> </div>
                        <div>@spot.Address</div>
                        <div>@getStarScore(@spot._id)&#127775;</div>
                        <div><i class="@getBusyScoreIcon(@spot._id)"></i> </div>
                    </div>
                </a></li>
            }

    </ul>
}

<div id = "big_map_box">
    @if (@post_first_render && (@_mapHeight != 0 && @_mapWidth != 0)){
        <GoogleMap 
        @bind-Center="_jsMapCenter" @bind-Center:event="OnMapCenterChanged"
        @bind-Zoom="_jsMapZoomLevel" @bind-Zoom:event="OnMapZoomLevelChanged"
        OnMapInitialized="@(() => {})" 
        Width="@_mapWidth"
	    Height="@_mapHeight"
        ApiKey="@_googleMapsApiKey" />
    }
</div>


<script>
    window.GetElementHeight = async (name) => {
        return document.getElementById(name).offsetHeight;
    }
    window.GetElementWidth = async (name) => {
        return document.getElementById(name).offsetWidth;
    }
</script>

<script>
    window.GetElementHeight = async (name) => {
        return document.getElementById(name).offsetHeight;
    }
    window.GetElementWidth = async (name) => {
        return document.getElementById(name).offsetWidth;
    }
</script>


@code {
    List<StudySpot> study_spots;
    bool post_first_render = false;

    @* Configuration for the map *@
    private string _googleMapsApiKey = "";
	private GeolocationData _jsMapCenter = new GeolocationData("Boston University");
	private byte _jsMapZoomLevel = 16;
    private int _mapHeight;
    private int _mapWidth;

    private double getBusyScore(MongoDB.Bson.ObjectId spot_id){
        try{
            var result = dbContext.BusyScores.Aggregate()
                .Match(b => b.Spot_id == spot_id)
                .ToList();
            if (result == null || result.Count == 0){
                return 0.0;
            }
            var filteredResults = from b in result
                            where DateTime.Now.ToUniversalTime().Subtract(b.Date).TotalMinutes < 60 // <- Need to fix this
                            select b;
            return filteredResults.Average(b => b.Score);
        }catch(Exception ex){
            Console.WriteLine($"Error while retrieving busy score for {spot_id}: {ex.Message}");
            return 0.0;
        }
    }

    private string getBusyScoreIcon(MongoDB.Bson.ObjectId spot_id){
        double score = getBusyScore(spot_id);
        if (score < 1.666){
            return "fas fa-user";
        }else if (score < 2.333){
            return "fas fa-user-friends";
        }else{
            return "fas fa-users";
        }

    }
    private double getStarScore(MongoDB.Bson.ObjectId spot_id){
        try{
            var result = dbContext.Comments.Aggregate()
                .Match(c => c.Spot_id == spot_id)
                .Group(c => c.Spot_id, g => 
                    new {
                        Spot_id = g.Key,
                        AverageStar = g.Average(p => p.Stars)
                    })
                .ToList();
            return Math.Round(result.Select(_ => _.AverageStar).FirstOrDefault(), 1);
        }catch(Exception ex){
            Console.WriteLine($"Error while retrieving star score for {spot_id}: {ex.Message}");
            return 0;
        }
    }

    private double getReviewNum(MongoDB.Bson.ObjectId spot_id){
        return dbContext.Comments.Find(c => c.Spot_id == spot_id).CountDocuments();
    }

    protected override async Task OnInitializedAsync() // Runs when the page loads
    {
        _googleMapsApiKey = Configuration["GMapsApiKey"];

        study_spots = await dbContext.StudySpots.Find(s => s._id != null).SortBy(s => s._id).ToListAsync();
        
        StateHasChanged();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender) // Runs after the first time the page loads
    {
        if (firstRender)
        {
            _mapHeight = await JS.InvokeAsync<int>("GetElementHeight","big_map_box");
            _mapWidth = await JS.InvokeAsync<int>("GetElementWidth","big_map_box");
            
            post_first_render = true;
            StateHasChanged();
        }
    }


}
