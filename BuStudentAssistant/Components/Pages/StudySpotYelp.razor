@page "/studySpotYelp"
@rendermode InteractiveServer
@using System.Text.Json
@using System.Text.Json.Serialization
@using Majorsoft.Blazor.Components.Maps
@using Microsoft.Extensions.Configuration
@using System.Drawing.Imaging
@inject IConfiguration Configuration
@inject IHttpClientFactory ClientFactory
@inject HttpClient Http
@inject IJSRuntime JS
@using Sy = StudySpotYelpNameSpace



<PageTitle>Study Spot Yelp</PageTitle>

@if (study_spots == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <ul id="study_spot_list">
        <h1 class = "title">
            Study Spot Yelp
        </h1>
        
        @foreach (var spot in study_spots)
            {
                <li><a href = "/StudySpotYelp/@spot.Id">
                    <img src = "https://www.bu.edu/files/2018/12/educational-resource-center-StudySpots-6.jpg">
                    <div>
                        
                        <div>(@spot.Id) @spot.Name </div>
                        <div>Stars: @spot.Score/5.0</div>
                        <div>Address: @spot.Address</div>
                    </div>
                    

                </a></li>
                
            }

    </ul>
}

<div id = "big_map_box">
    @if (@post_first_render && (@_mapHeight != 0 && @_mapWidth != 0)){
        <GoogleMap 
        @bind-Center="_jsMapCenter" @bind-Center:event="OnMapCenterChanged"
        @bind-Zoom="_jsMapZoomLevel" @bind-Zoom:event="OnMapZoomLevelChanged"
        OnMapInitialized="@(() => {})" 
        Width="@_mapWidth"
	    Height="@_mapHeight"
        ApiKey="@_googleMapsApiKey" />
    }
</div>


<script>
    window.GetElementHeight = async (name) => {
        return document.getElementById(name).offsetHeight;
    }
    window.GetElementWidth = async (name) => {
        return document.getElementById(name).offsetWidth;
    }
</script>

<script>
    window.GetElementHeight = async (name) => {
        return document.getElementById(name).offsetHeight;
    }
    window.GetElementWidth = async (name) => {
        return document.getElementById(name).offsetWidth;
    }
</script>


@code {
    Sy.StudySpot[] study_spots;
    bool post_first_render = false;

    @* Configuration for the maap *@
    private string _googleMapsApiKey = "";
	private GeolocationData _jsMapCenter = new GeolocationData("Boston University");
	private byte _jsMapZoomLevel = 16;
    private int _mapHeight;
    private int _mapWidth;


    protected override async Task OnInitializedAsync() // Runs when the page loads
    {
        _googleMapsApiKey = Configuration["GMapsApiKey"];
        string[] places = {"Mugar Memorial Library","Educational Resource Center","Pickering Educational Resources Library","Science & Engineering Library","HoJo","Center for Computing & Data Sciences","College of Arts & Sciences Think Tank","Stone Science Library","School of Theology Library","Ziskind Lounge","Dean’s Study Lounge","College of General Studies Lounges"};
        string[] addresses = {"771 Commonwealth Ave","100 Bay State Road, fifth floor","Wheelock College of Education & Human Development 2 Silber Way","38 Cummington Mall","575 Commonwealth Ave., eighth floor","665 Commonwealth Ave.","725 Commonwealth Ave., Room 105","725 Commonwealth Ave., Room 440","745 Commonwealth Ave., second floor","George Sherman Union 775 Commonwealth Ave., second floor", "George Sherman Union 775 Commonwealth Ave., third floor", "871 Commonwealth Ave."};
        study_spots = places.Select((place,index) => new Sy.StudySpot
        {
            Id = index,
            Name = place,
            Score = Random.Shared.Next(0,5),
            Address = addresses[index],
            Map_Marker = index + 1
        }).ToArray();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender) // Runs after the first time the page loads
    {
        if (firstRender)
        {
            _mapHeight = await JS.InvokeAsync<int>("GetElementHeight","big_map_box");
            _mapWidth = await JS.InvokeAsync<int>("GetElementWidth","big_map_box");
            post_first_render = true;
            StateHasChanged();
        }
    }


}
