@page "/studySpotYelp"
@rendermode InteractiveServer
@using System.Text.Json
@using System.Text.Json.Serialization
@using Microsoft.Extensions.Configuration
@using System.Drawing.Imaging
@inject IConfiguration Configuration
@inject IHttpClientFactory ClientFactory
@inject HttpClient Http
@inject IJSRuntime JS

<PageTitle>Study Spot Yelp</PageTitle>

@* -----------------------THIS WAS FOR DEVELOPMENT----------------------- *@
@* <h1>Study Spot Yelp</h1>
<p>Key: @Configuration["GMapsApiKey"]</p>
<div>@placeDetails</div>

<h3>Stream Image</h3>
<p>
    <img id="image" />
</p> *@
@* -----------------------END OF DEVELOPMENT----------------------- *@


@if (study_spots == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <ul class="study_spot_list">
        @foreach (var spot in study_spots)
            {
                <li><a>
                    <div>(@spot.Id) @spot.Name </div>
                    <div>Stars: @spot.Score/5.0</div>
                    <div>Address: @spot.Address</div>
                </a></li>
            }

    </ul>
}

<div class = "big_map_box">
    <img id="big_map" />
</div>



<script> //Script that updates an image 
  window.setImage = async (imageElementId, imageStream) => {
    const arrayBuffer = await imageStream.arrayBuffer();
    const blob = new Blob([arrayBuffer]);
    const url = URL.createObjectURL(blob);
    const image = document.getElementById(imageElementId);
    image.onload = () => {
      URL.revokeObjectURL(url);
    }
    image.src = url;
  }
</script>


@code {
    @* ---- DEV ----  *@
    @* string placeDetails;
    bool map_loaded; *@
    @* -------------  *@
    
    StudySpot[] study_spots;

    private string my_place_id = "ChIJFzjlY_B544kRyL6j4ABuNCs";

//------------------Start of GMAPS Methods-----------------------------//

    private async Task<Stream> getUrl(string sURL) // makes a get call from the parameter 'sURL' and returns a Stream object
    {
        var client = ClientFactory.CreateClient();
        
        var request = new HttpRequestMessage(HttpMethod.Get, sURL);
        var response = await client.SendAsync(request);
        
        if (response.IsSuccessStatusCode)
        {
            return await response.Content.ReadAsStreamAsync();
        } 
        throw new HttpRequestException("Response Success Status Code not successful" );
    }

    private string streamToString(Stream stream) // parses a stream into a string
    {
        StreamReader reader = new StreamReader(stream); 

        string sLine = reader.ReadLine();
        string returnStr = "";

        while (sLine != null)
        {
            if (sLine != null)
                returnStr += sLine + "\n";
            sLine = reader.ReadLine();
        }
        return returnStr;
    }

    private async Task setImage(Stream imageStream, String img_id)
    {
        Console.WriteLine($"Updating '{img_id}' <img>...");
        var dotnetImageStream = new DotNetStreamReference(imageStream);
        await JS.InvokeVoidAsync("setImage", img_id, dotnetImageStream);
        StateHasChanged();
    }


    private string Place_Details(string place_id, string fields = "id,displayName")
    /*
        * place_id - every location in google maps has a place_id associated with it, to find it go to: https://developers.google.com/maps/documentation/javascript/examples/places-placeid-finder
        * fields - the desired fields that are returned (Note: some fields cost money and some don't)
        */
    {
        Console.WriteLine($"Calling Google Place API for {place_id} details...");
        try{
            
            var api_key = Configuration["GMapsApiKey"];
            var stream = Task.Run(() => getUrl($"https://places.googleapis.com/v1/places/{place_id}?fields=id,displayName&key={api_key}")).Result; // makes url call
            return streamToString(stream); // converts returned stream into a string and returns it
        }catch(Exception ex){
            Console.WriteLine($"Couldn't load place details: {ex.Message}");
            return null;
        }
        
    }

    private async Task Maps_Photo(string center, string photo_id ,int width = 500, int height = 400, int zoom = 20)
    {
        Console.WriteLine($"Calling Google Maps API for static image of '{center}' to update '{photo_id}' ");
        try{
            var api_key = Configuration["GMapsApiKey"];
            Stream imageStream = Task.Run(() => getUrl($"https://maps.googleapis.com/maps/api/staticmap?key={api_key}&size={500}x{500}&Zoom={20}&center=\"{center}\"")).Result; // makes url call
            await setImage(imageStream,photo_id);
            StateHasChanged();
        }catch (Exception ex){
            Console.WriteLine($"Couldn't load map photo: {ex.Message}");
        }
        
    }

//------------------End of GMAPS Methods-----------------------------//

    protected override async Task OnInitializedAsync() // Runs when the page loads
    {
        @* ---- DEV ----  *@
        @* map_loaded = false;
        placeDetails = Place_Details(my_place_id); *@
        @* -------------  *@

        string[] places = {"Mugar Memorial Library","Educational Resource Center","Pickering Educational Resources Library","Science & Engineering Library","HoJo","Center for Computing & Data Sciences","College of Arts & Sciences Think Tank","Stone Science Library"};
        string[] addresses = {"771 Commonwealth Ave","100 Bay State Road, fifth floor","Wheelock College of Education & Human Development 2 Silber Way","38 Cummington Mall","575 Commonwealth Ave., eighth floor","665 Commonwealth Ave.","725 Commonwealth Ave., Room 105","725 Commonwealth Ave., Room 440"};
        study_spots = places.Select((place,index) => new StudySpot
        {
            Id = index,
            Name = place,
            Score = Random.Shared.Next(0,5),
            Address = addresses[index],
            Map_Marker = index + 1
        }).ToArray();

    }

    protected override async Task OnAfterRenderAsync(bool firstRender) // Runs after the first time the page loads
    {
        @* ---- DEV ----  *@
        if (firstRender)
        {
            await Maps_Photo("Boston University, Boston, ma", "big_map");
        }
        @* -------------  *@
    }

    @* ----- Class for Study Spots ------ *@
    private class StudySpot
    {
        public int Id { get; set; }
        public float Score { get; set; }
        public string? Name { get; set; }
        public string? Address { get; set; }

        public int Map_Marker { get; set; }
        
    }


}
