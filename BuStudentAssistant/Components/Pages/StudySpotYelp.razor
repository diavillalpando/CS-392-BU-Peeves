@page "/studySpotYelp"
@rendermode InteractiveServer
@using System.Text.Json
@using System.Text.Json.Serialization
@using Majorsoft.Blazor.Components.Maps
@using Microsoft.Extensions.Configuration
@using System.Drawing.Imaging
@using BuStudentAssistant.Data
@using BuStudentAssistant.Models
@using MongoDB.Driver
@inject IConfiguration Configuration
@inject IHttpClientFactory ClientFactory
@inject HttpClient Http
@inject IJSRuntime JS
@inject IMongoDbContext dbContext
@using Sy = StudySpotYelpNameSpace



<PageTitle>Study Spot Yelp</PageTitle>

@if (study_spots == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <ul id="study_spot_list">
        <h1 class = "title">
            Study Spot Yelp
        </h1>
        
        @foreach (var spot in study_spots)
            {
                <li><a href = "/StudySpotYelp/@spot._id">
                    <img src = "@spot.Image">
                    <div>
                        
                        <div><b>@spot.Name</b> </div>
                        <div>@getScore(@spot._id)&#127775;</div>
                        <div>@spot.Address</div>
                    </div>
                    

                </a></li>
                
            }

    </ul>
}

<div id = "big_map_box">
    @if (@post_first_render && (@_mapHeight != 0 && @_mapWidth != 0)){
        <GoogleMap 
        @bind-Center="_jsMapCenter" @bind-Center:event="OnMapCenterChanged"
        @bind-Zoom="_jsMapZoomLevel" @bind-Zoom:event="OnMapZoomLevelChanged"
        OnMapInitialized="@(() => {})" 
        Width="@_mapWidth"
	    Height="@_mapHeight"
        ApiKey="@_googleMapsApiKey" />
    }
</div>


<script>
    window.GetElementHeight = async (name) => {
        return document.getElementById(name).offsetHeight;
    }
    window.GetElementWidth = async (name) => {
        return document.getElementById(name).offsetWidth;
    }
</script>

<script>
    window.GetElementHeight = async (name) => {
        return document.getElementById(name).offsetHeight;
    }
    window.GetElementWidth = async (name) => {
        return document.getElementById(name).offsetWidth;
    }
</script>


@code {
    List<StudySpot> study_spots;
    bool post_first_render = false;

    @* Configuration for the maap *@
    private string _googleMapsApiKey = "";
	private GeolocationData _jsMapCenter = new GeolocationData("Boston University");
	private byte _jsMapZoomLevel = 16;
    private int _mapHeight;
    private int _mapWidth;

    private double getScore(MongoDB.Bson.ObjectId spot_id){
        return 0;
    }
    protected override async Task OnInitializedAsync() // Runs when the page loads
    {
        _googleMapsApiKey = Configuration["GMapsApiKey"];

        study_spots = await dbContext.StudySpots.Find(s => s._id != null).SortBy(s => s._id).ToListAsync();
        
        StateHasChanged();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender) // Runs after the first time the page loads
    {
        if (firstRender)
        {
            _mapHeight = await JS.InvokeAsync<int>("GetElementHeight","big_map_box");
            _mapWidth = await JS.InvokeAsync<int>("GetElementWidth","big_map_box");
            
            post_first_render = true;
            StateHasChanged();
        }
    }


}
