@page "/emailAssistant"
@using Google.Apis.Gmail.v1
@using Google.Apis.Gmail.v1.Data
@using Google.Apis.Services
@using Google.Apis.Util.Store
@using Google.Apis.Auth.OAuth2
@using System.Threading.Tasks
@using System.Text
@using OpenAI.GPT3
@using OpenAI.GPT3.Interfaces;
@using OpenAI.GPT3.Managers;
@using OpenAI.GPT3.ObjectModels.RequestModels
@using OpenAI.GPT3.ObjectModels
@using System.Reflection.Metadata.Ecma335
@using System.Text.Json;
@using Microsoft.Extensions.Configuration
@inject IConfiguration Configuration
@rendermode InteractiveServer


<PageTitle>Email Assistant</PageTitle> 

<h3>Email Assistant</h3>
<h5>@email</h5>
<button class="switch_account" @onclick="LogOut">Switch Accounts</button>

@if (post_first_render) { //initial rendering for the page
<div class="container">
    <div class="email-list">
        @if (loading) // loading for emails
        {
            <p class="loading-message">Loading...</p>
        }
        else if (error)
        {
            <p class="error-message">Error occurred while loading emails. @errorMessage</p>
        }
        else if (messageSummaries != null)
        {
            <h5> Select an email to view details</h5>
            <ul class="message-list">
                @foreach (var message in messageOnPage)
                {
                    <li class="email-item" @onclick="@(e => ToggleEmailDetails(message))">
                        <div class="message-container">
                            @if (message != null)
                            {
                                <strong class="message-detail">From: </strong> @message.From <br />
                                <strong class="message-detail">To: </strong> @message.To <br />
                                <strong class="message-detail">Subject: </strong> @message.Subject
                            }
                            else
                            {
                                <div class="no-content-message">No content available for this message.</div>
                            }
                        </div>
                    </li>
                }
            </ul>
        }
        else
        {
            <p class="no-emails-message">No emails found.</p>
            <br />
        }
    </div>
    <div class="email-details">
        <div class="email-content">
            <!-- Details of the selected email will be displayed here -->
            @if (selectedEmail != null)
            {
                <strong>From: </strong> @selectedEmail.From <br />
                <strong>To: </strong> @selectedEmail.To <br />
                <strong>Subject: </strong> @selectedEmail.Subject <br />
                <strong>Summary: </strong> @(selectedEmail.SummarizedBody.ToString())<br />
                <strong>Generated Reply: </strong> @selectedEmail.GeneratedReply <br />
                <div></div>
                <input class="user-input" type="text" @bind="userInput" />
                <button class="generate-reply-button" @onclick="@(e => Submit(selectedEmail))">Generate Reply</button>
                <n />
                <button class="reply-button" @onclick="(e) => SendEmail(selectedEmail.From, selectedEmail.To, selectedEmail.Subject, selectedEmail.GeneratedReply)">Send Reply</button> <br />
            }
            else
            {
                <div>No email selected.</div>
            }
        </div>
    </div>
</div>
    <div class="page-navigator">
        <button @onclick="PreviousPage">Previous</button>
        <span> <strong>Page: </strong> @(pageIndex.ToString())</span>
        <button @onclick="NextPage">Next</button>
    </div> 

} else
{
    <p class="loading-message">Rendering...</p>
}

@code {
    private IList<Message> messages;
    private List<Message> displayedMessages;
    private List<EmailMessage> messageSummaries = new List<EmailMessage>();
    private List<EmailMessage> messageOnPage = new List<EmailMessage>();
    private int pageIndex = 1;
    private bool loading = true;
    private bool error = false;
    private const int MaxDisplayedMessages = 5;
    private string api_key;
    string googleClientId;
    string googleClientSecret;
    private string errorMessage= "";
    private string email;
    private string userInput;
    private EmailMessage selectedEmail;
    bool post_first_render = false;
    bool loggedIn = true;
    UserCredential credential;

    private void Submit(EmailMessage email)
    {
        GenerateReply(email, userInput);
        StateHasChanged();
    }
    private void UpdateUserInput(ChangeEventArgs e) => userInput = e.Value.ToString();

    string[] scopes = new[] 
    {
        GmailService.ScopeConstants.GmailReadonly,
        GmailService.ScopeConstants.GmailCompose,
        GmailService.ScopeConstants.GmailSend
    };


    protected override async Task OnInitializedAsync()
    {
        if (post_first_render)
        {
            api_key = Configuration["ChatGptKey"];
            googleClientId = Configuration["GmailgoogleClientId"];
            googleClientSecret = Configuration["GmailgoogleClientSecret"];
            await LoadEmails();
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            api_key = Configuration["ChatGptKey"];
            googleClientId = Configuration["GmailgoogleClientId"];
            googleClientSecret = Configuration["GmailgoogleClientSecret"];
            await LoadEmails();
            post_first_render = true;
            StateHasChanged();
        }
    }

    public class EmailMessage
    {
        public string From { get; set; }
        public string To { get; set; }
        public string Subject { get; set; }
        public string SummarizedBody { get; set; }
        public string GeneratedReply { get; set; }
    }

    public static UserCredential Authorize(string clientId, string clientSecret, string[] scopes)
    {

        // Initiate authorization flow
        return GoogleWebAuthorizationBroker.AuthorizeAsync(
            new ClientSecrets { ClientId = clientId, ClientSecret = clientSecret },
            scopes.Append("profile").ToArray(),
            "user",
            CancellationToken.None,
            new FileDataStore("Gmail.API.Auth.Store") // saves login ifo so future authentication is not required
            ).Result;
    }
    private void LogOut()
    {
        credential.RevokeTokenAsync(CancellationToken.None).Wait(); // remove the credential
        credential = Authorize(googleClientId, googleClientSecret, scopes); // prompt for new account
        // clear information from previous account
        messages.Clear();
        messageOnPage.Clear();
        displayedMessages.Clear();
        messageSummaries.Clear();
        // api keys
        api_key = Configuration["ChatGptKey"];
        googleClientId = Configuration["GmailgoogleClientId"];
        googleClientSecret = Configuration["GmailgoogleClientSecret"];
        // load page and update
        LoadEmails();
        StateHasChanged();

    }


    // displaying emails
    private async Task LoadEmails()
    {
        loading = true;
        try
        {

            credential = Authorize(googleClientId, googleClientSecret, scopes);
            

            var gmailService = new GmailService(new BaseClientService.Initializer
                {
                    HttpClientInitializer = credential
                });
            var profile = gmailService.Users.GetProfile("me").Execute();
            email = profile.EmailAddress;

            if (pageIndex * MaxDisplayedMessages > messageSummaries.Count)
            {
                EmailGetter emailGetter = new EmailGetter(credential);
                messages = emailGetter.GetMessages("me").Skip((pageIndex - 1) * MaxDisplayedMessages).Take(MaxDisplayedMessages).ToList();
                displayedMessages = messages.ToList();

                foreach (var message in displayedMessages)
                {
                    messageSummaries.Add(new EmailMessage
                        {
                            From = GetSenderEmailAddress(message),
                            To = GetRecipientEmailAddress(message),
                            Subject = GetMessageSubject(message),
                            SummarizedBody = await GetMessageSummary(message)
                        });
                }
            }
            messageOnPage = messageSummaries.Skip((pageIndex - 1) * MaxDisplayedMessages).Take(MaxDisplayedMessages).ToList();

        }
        catch (Exception ex)
        {
            error = true;
            errorMessage = ex.Message.ToString();
        }
        finally
        {
            loading = false;
            StateHasChanged();
        }
    }

    private void NextPage()
    {
        pageIndex++;
        messageOnPage.Clear(); // Clear previous messages
        LoadEmails();
    }

    private void PreviousPage()
    {
        pageIndex--;
        messageOnPage.Clear(); // Clear previous messages
        LoadEmails();
    }


    private static string GetMessageBody(Message message)
    {
        string body = "";

        if (message.Payload.Body != null && message.Payload.Body.Data != null)
        {
            body = DecodeBody(message.Payload.Body);
        }
        else if (message.Payload.Parts != null)
        {
            foreach (var part in message.Payload.Parts)
            {
                if ((part.MimeType == "text/plain" || part.MimeType == "text/html") && part.Body != null && part.Body.Data != null)
                {
                    body = DecodeBody(part.Body);
                    break;
                }
            }
        }

        return body;
    }

    private static string DecodeBody(MessagePartBody body)
    {
        string data = body.Data;
        byte[] dataBytes = FromBase64Url(data);
        return Encoding.UTF8.GetString(dataBytes);
    }

    private static byte[] FromBase64Url(string base64Url)
    {
        string paddedBase64 = base64Url.Length % 4 == 0 ? base64Url : base64Url + "====".Substring(base64Url.Length % 4);
        string base64 = paddedBase64.Replace("_", "/").Replace("-", "+");
        return Convert.FromBase64String(base64);
    }

    // summarizing emails for display
    private string GetSenderEmailAddress(Message message)
    {
        var fromHeader = message.Payload.Headers.FirstOrDefault(h => h.Name == "From");
        return fromHeader?.Value;
    }
    private string GetRecipientEmailAddress(Message message)
    {
        var fromHeader = message.Payload.Headers.FirstOrDefault(h => h.Name == "To");
        return fromHeader?.Value;   
    }
    private string GetMessageSubject(Message message)
    {
        var subjectHeader = message.Payload.Headers.FirstOrDefault(h => h.Name == "Subject");
        return subjectHeader?.Value;
    }

    private async Task<string> GetMessageSummary(Message message)
    {
        var body = GetMessageBody(message);
        string sysMsg = "You are a helpful email reader.";
        string summed = await Chat(sysMsg, $"Summarize this email in less than 50 words. Subject: {GetMessageSubject(message)} Body: {body}");
        return summed;
    }
    private async void GenerateReply(EmailMessage email, string response)
    {
        string sysMsg = "You are a helpful email writer that focuses on ensuring the main point is told. Only focus on the main body of the email.";
        string summary = email.SummarizedBody;
        string generatedEmail = await Chat(sysMsg, $"Write a reply to saying {response} to {summary}");
        email.GeneratedReply = generatedEmail;
    }

    private async Task<string> Chat(string system, string prompt)
    {
        try
        {
            if (string.IsNullOrEmpty(prompt) && string.IsNullOrEmpty(system))
            {
                return "Failed to read the body of the message.";    
            }
            var openAIService = new OpenAI.GPT3.Managers.OpenAIService(new OpenAiOptions()
                {
                    ApiKey = api_key
                });
            var completionResult = await openAIService.ChatCompletion.CreateCompletion(new ChatCompletionCreateRequest
            {
                Messages = new List<ChatMessage>
                {
                    ChatMessage.FromSystem(system),
                    ChatMessage.FromUser(prompt)
                },
                Model = Models.ChatGpt3_5Turbo,
                MaxTokens = 100
            });

            if (completionResult.Successful && completionResult.Choices.Count > 0)
            {
                return completionResult.Choices.First().Message.Content;
            }
            else
            {
                return ($"Completion result was not successful, the prompt was: {prompt}");    
            }
        }
        catch (Exception ex)
        {
            return "Error occurred while generating summary";
        }

    }
    private void ToggleEmailDetails(EmailMessage email)
    {
        // Set selectedEmail to the clicked email
        selectedEmail = email;
        userInput = "";
        Console.WriteLine("Selected email: " + email.Subject);
        StateHasChanged();
    }
    // sending emails
    private void SendEmail(string from, string to, string subject, string body)
    {
        try
        {
            // Check if sender and recipient email addresses are empty or null
            if (string.IsNullOrWhiteSpace(from) || string.IsNullOrWhiteSpace(to))
            {
                errorMessage = "Sender or recipient email address is empty.";
                StateHasChanged();
                return;
            }
            if (string.IsNullOrEmpty(subject) || string.IsNullOrEmpty(body)) {
                errorMessage = "subject or body is empty";
                StateHasChanged();
                return;
            }

            // remove braces

            (string sender, string senderEmail) = ParseNameAndEmail(from);
            (string recipient, string recipientEmail) = ParseNameAndEmail(from);


            credential = Authorize(googleClientId, googleClientSecret, scopes);
            
            

            // Construct MimeMessage
            var msg = new MimeKit.MimeMessage();
            msg.From.Add(new MimeKit.MailboxAddress(sender, senderEmail));
            msg.To.Add(new MimeKit.MailboxAddress(recipient, recipientEmail));
            msg.Subject = subject;
            msg.Body = new MimeKit.TextPart("plain")
                {
                    Text = body
                };

            // Convert MimeMessage to RFC822 formatted string
            string rfc822Message = msg.ToString();

            using (var gmailService = new GmailService(new BaseClientService.Initializer
                {
                    HttpClientInitializer = credential
                }))
            {
                var message = new Message
                    {
                        Raw = Base64UrlEncode(rfc822Message)
                    };

                // Send the email
                gmailService.Users.Messages.Send(message, "me").Execute();
            }
            errorMessage = ("Email sent successfully.");

        }
        catch (Exception ex)
        {
            errorMessage = $"Error: {ex.Message}";
        }
        finally
        {
            StateHasChanged();
        }
    }

    public static (string name, string email) ParseNameAndEmail(string input)
    {
        if (string.IsNullOrEmpty(input))
            throw new ArgumentException("Input string cannot be null or empty.");
        // Find the position of the opening and closing angle brackets
        int startIndex = input.IndexOf('<');
        int endIndex = input.IndexOf('>');

        if (startIndex != -1 && endIndex != -1 && endIndex > startIndex)
        {
            // Extract the name substring before the opening angle bracket
            string name = input.Substring(0, startIndex).Trim();

            // Extract the email substring between the angle brackets
            string email = input.Substring(startIndex + 1, endIndex - startIndex - 1).Trim();

            return (name, email);
        }
        else
        {
            // If the input format is incorrect, throw an exception
            return ("", input);
        }
    }

        static string Base64UrlEncode(string input)
        {
            byte[] inputBytes = Encoding.UTF8.GetBytes(input);
            return Convert.ToBase64String(inputBytes)
                .Replace('+', '-')
                .Replace('/', '_')
                .Replace("=", "");
        }

    // getting emails
    internal class EmailGetter
    {
        private readonly UserCredential _credential;

        public EmailGetter(UserCredential credential)
        {
            _credential = credential;
        }

        public IEnumerable<Message> GetMessages(string userId, string[] labels = null, bool includeSpamAndTrash = false)
        {
            if (string.IsNullOrEmpty(userId))
                throw new ArgumentNullException(nameof(userId));

            using (var gmailService = new GmailService(new BaseClientService.Initializer() { HttpClientInitializer = _credential }))
            {
                var listMessagesRequest = gmailService.Users.Messages.List(userId);
                listMessagesRequest.IncludeSpamTrash = includeSpamAndTrash;

                if (labels != null)
                    listMessagesRequest.LabelIds = labels;

                bool hasNext = true;
                while (hasNext)
                {
                    var messages = listMessagesRequest.Execute();
                    hasNext = !string.IsNullOrEmpty(messages.NextPageToken);

                    foreach (var message in messages.Messages)
                        yield return GetSingleMessage(userId, message.Id, gmailService);

                    listMessagesRequest.PageToken = messages.NextPageToken;
                }
            }
        }

        private Message GetSingleMessage(string userId, string messageId, GmailService service)
        {
            var getSingleMessageRequest = service.Users.Messages.Get(userId, messageId);
            getSingleMessageRequest.Format = UsersResource.MessagesResource.GetRequest.FormatEnum.Full;
            getSingleMessageRequest.MetadataHeaders = new[] { "From", "To" };

            return getSingleMessageRequest.Execute();
        }
    }



}


