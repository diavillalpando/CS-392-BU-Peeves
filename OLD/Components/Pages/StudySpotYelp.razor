@page "/studySpotYelp"
@rendermode InteractiveServer
@using System.Text.Json
@using System.Text.Json.Serialization
@using Microsoft.Extensions.Configuration
@using System.Drawing.Imaging
@using BuStudentAssistant.Data
@using BuStudentAssistant.Models
@using MongoDB.Driver
@inject IConfiguration Configuration
@inject IHttpClientFactory ClientFactory
@inject HttpClient Http
@inject IJSRuntime JS
@inject NavigationManager NavigationManager
@inject IMongoDbContext dbContext
@using Radzen
@using Sy = StudySpotYelpNameSpace



<PageTitle>Study Spot Yelp</PageTitle>

@if (study_spots == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <ul id="study_spot_list">
        <h1 class = "title">
            Study Spot Yelp
        </h1>
        
        @foreach (var spot in study_spots)
            {
                <li><a href = "/StudySpotYelp/@spot._id">
                    <img src = "@spot.Image">
                    <div>
                        <div><b>@spot.Name</b> </div>
                        <div>@spot.Address</div>
                        <div>@getStarScore(@spot._id)&#127775;</div>
                        <div><i class="@getBusyScoreIcon(@spot._id)"></i> </div>
                    </div>
                </a></li>
            }

    </ul>
}

<div id = "big_map_box">
    @if (@post_first_render){

        @* New Radzen Google Maps box *@
        <RadzenGoogleMap ApiKey=@_googleMapsApiKey @ref=map style="height: 100%;" Options=@(new Dictionary<string, object> { { "disableDoubleClickZoom", true }, {"clickableIcons", false}, {"disableDefaultUI", true} })
                    FitBoundsToMarkersOnUpdate = "true" Center=@(new GoogleMapPosition() { Lat = 42.35060811767134, Lng = -71.10534552683325 }) MapClick=@OnMapClick MarkerClick=@OnMarkerClick>
                <Markers>
                    @if (study_spots != null){
                        @foreach(StudySpot spot in study_spots){
                            <RadzenGoogleMapMarker Title=@spot._id.ToString() Label="@spot.Name" Icon = "@spot.Image" Position=@(new GoogleMapPosition() { Lat = @spot.Lat, Lng = @spot.Lng }) />
                        }
                    }
                    
                </Markers>
            </RadzenGoogleMap>
    }
</div>



@code {
    List<StudySpot> study_spots;
    bool post_first_render = false;

    @* Configuration for the map *@
    RadzenGoogleMap map;
    private string _googleMapsApiKey = "";
	private byte zoom = 17;

    void OnMapClick(GoogleMapClickEventArgs args)
    {
        Console.WriteLine($"Map clicked at Lat: {args.Position.Lat}, Lng: {args.Position.Lng}");
    }

    async Task OnMarkerClick(RadzenGoogleMapMarker marker)
    {
        NavigationManager.NavigateTo($"/studySpotYelp/{marker.Title}",forceLoad: true);
    }

    private double getBusyScore(MongoDB.Bson.ObjectId spot_id){
        try{
            var result = dbContext.BusyScores.Aggregate()
                .Match(b => b.Spot_id == spot_id)
                .ToList();
            if (result == null || result.Count == 0){
                return 0.0;
            }
            var filteredResults = from b in result
                            where DateTime.Now.ToUniversalTime().Subtract(b.Date).TotalMinutes < 60 // <- Need to fix this
                            select b;
            return filteredResults.Average(b => b.Score);
        }catch(Exception ex){
            Console.WriteLine($"Error while retrieving busy score for {spot_id}: {ex.Message}");
            return 0.0;
        }
    }

    private string getBusyScoreIcon(MongoDB.Bson.ObjectId spot_id){
        double score = getBusyScore(spot_id);
        if (score < 1.666){
            return "fas fa-user";
        }else if (score < 2.333){
            return "fas fa-user-friends";
        }else{
            return "fas fa-users";
        }

    }
    private double getStarScore(MongoDB.Bson.ObjectId spot_id){
        try{
            var result = dbContext.Comments.Aggregate()
                .Match(c => c.Spot_id == spot_id)
                .Group(c => c.Spot_id, g => 
                    new {
                        Spot_id = g.Key,
                        AverageStar = g.Average(p => p.Stars)
                    })
                .ToList();
            return Math.Round(result.Select(_ => _.AverageStar).FirstOrDefault(), 1);
        }catch(Exception ex){
            Console.WriteLine($"Error while retrieving star score for {spot_id}: {ex.Message}");
            return 0;
        }
    }

    private double getReviewNum(MongoDB.Bson.ObjectId spot_id){
        return dbContext.Comments.Find(c => c.Spot_id == spot_id).CountDocuments();
    }

    protected override async Task OnInitializedAsync() // Runs when the page loads
    {
        _googleMapsApiKey = Configuration["GMapsApiKey"];

        study_spots = await dbContext.StudySpots.Find(s => s._id != null).SortBy(s => s._id).ToListAsync();

        
        StateHasChanged();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender) // Runs after the first time the page loads
    {
        if (firstRender)
        {
            post_first_render = true;
            StateHasChanged();
        }
    }


}
